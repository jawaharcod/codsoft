      Task - 2



1.Prompt the user to enter a text or provide a file to count the words.
import java.util.Scanner;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class WordCount {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter '1' to input text or '2' to provide a file for word count: ");
        int choice = scanner.nextInt();

        if (choice == 1) {
            // Read text input from the user
            scanner.nextLine(); // Consume the newline character
            System.out.println("Enter the text: ");
            String text = scanner.nextLine();
            int wordCount = countWords(text);
            System.out.println("Word count: " + wordCount);
        } else if (choice == 2) {
            // Read text from a file
            System.out.println("Enter the file path: ");
            scanner.nextLine(); // Consume the newline character
            String filePath = scanner.nextLine();
            int wordCount = countWordsFromFile(filePath);
            if (wordCount != -1) {
                System.out.println("Word count: " + wordCount);
            } else {
                System.out.println("File not found or an error occurred.");
            }
        } else {
            System.out.println("Invalid choice.");
        }

        scanner.close();
    }

    // Count words in a given text
    public static int countWords(String text) {
        if (text == null || text.isEmpty()) {
            return 0;
        }
        String[] words = text.split("\\s+");
        return words.length;
    }

    // Count words in a file
    public static int countWordsFromFile(String filePath) {
        try {
            File file = new File(filePath);
            FileInputStream fileInputStream = new FileInputStream(file);
            byte[] data = new byte[(int) file.length()];
            fileInputStream.read(data);
            fileInputStream.close();
            String text = new String(data, "UTF-8");
            return countWords(text);
        } catch (IOException e) {
            e.printStackTrace();
            return -1; // Return -1 to indicate an error
        }
    }
}
2.Read the input text or file and store it in a string.
import java.util.Scanner;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class ReadTextOrFile {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter '1' to input text or '2' to provide a file for reading: ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        String content = "";

        if (choice == 1) {
            // Read text input from the user
            System.out.println("Enter the text: ");
            content = scanner.nextLine();
        } else if (choice == 2) {
            // Read text from a file
            System.out.println("Enter the file path: ");
            String filePath = scanner.nextLine();
            content = readTextFromFile(filePath);
            if (content == null) {
                System.out.println("File not found or an error occurred.");
                return;
            }
        } else {
            System.out.println("Invalid choice.");
            return;
        }

        // Print the content
        System.out.println("Content: ");
        System.out.println(content);

        scanner.close();
    }

    // Read text from a file and return it as a string
    public static String readTextFromFile(String filePath) {
        try {
            File file = new File(filePath);
            FileInputStream fileInputStream = new FileInputStream(file);
            byte[] data = new byte[(int) file.length()];
            fileInputStream.read(data);
            fileInputStream.close();
            return new String(data, "UTF-8");
        } catch (IOException e) {
            e.printStackTrace();
            return null; // Return null to indicate an error
        }
    }
}
3.Split the string into an array of words using space or punctuation as delimiters.
import java.util.regex.Pattern;

public class SplitStringIntoWords {
    public static void main(String[] args) {
        // Sample input string
        String input = "Hello, world! This is a sample sentence.";

        // Define a regular expression pattern to split the string on spaces and punctuation
        Pattern pattern = Pattern.compile("[\\s\\p{Punct}]+");

        // Split the string into words
        String[] words = pattern.split(input);

        // Print the words
        for (String word : words) {
            System.out.println(word);
        }
    }
}
4.Initialize a counter variable to keep track of the number of words.
import java.util.regex.Pattern;

public class CountWordsInString {
    public static void main(String[] args) {
        // Sample input string
        String input = "Hello, world! This is a sample sentence.";

        // Define a regular expression pattern to split the string on spaces and punctuation
        Pattern pattern = Pattern.compile("[\\s\\p{Punct}]+");

        // Split the string into words
        String[] words = pattern.split(input);

        // Initialize a counter variable
        int wordCount = 0;

        // Iterate through the words
        for (String word : words) {
            // Increment the counter for each word encountered
            wordCount++;
            System.out.println(word);
        }

        // Print the total word count
        System.out.println("Total word count: " + wordCount);
    }
}
5.Iterate through the array of words and increment the counter for each word encountered.
public class CountWordsInArray {
    public static void main(String[] args) {
        // Sample array of words
        String[] words = {"Hello", "world", "This", "is", "a", "sample", "sentence"};

        // Initialize a counter variable
        int wordCount = 0;

        // Iterate through the array of words
        for (String word : words) {
            // Increment the counter for each word encountered
            wordCount++;
            System.out.println("Word: " + word);
        }
    }
}
6.Display the total count of words to the user.
public class CountWordsInArray {
    public static void main(String[] args) {
        // Sample array of words
        String[] words = {"Hello", "world", "This", "is", "a", "sample", "sentence"};

        // Initialize a counter variable
        int wordCount = 0;

        // Iterate through the array of words
        for (String word : words) {
            // Increment the counter for each word encountered
            wordCount++;
            System.out.println("Word: " + word);
        }

        // Print the total word count
        System.out.println("Total word count: " + wordCount);
    }
}

















                                                                                       


